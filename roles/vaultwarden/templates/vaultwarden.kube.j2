---
apiVersion: v1
kind: Deployment
metadata:
  annotations:  
    io.containers.autoupdate: registry
  name: {{ project_name }}
  labels:
    app: {{ project_name }}
spec:
  selector:
    matchLabels:
      app: {{ project_name }}
  template:
    metadata:
      labels:
        app: {{ project_name }}
        traefik.enable: "true"
        traefik.http.services.{{ project_name }}-sec.loadbalancer.server.port: 80
        traefik.http.routers.{{ project_name }}-sec.rule: Host(`{{ domain }}`)
        traefik.docker.network: {{ backend_network }}
        traefik.http.routers.{{ project_name }}-sec.tls: true
        traefik.http.routers.{{ project_name }}-sec.tls.certResolver: {{ certificate_resolver }}
        traefik.http.routers.{{ project_name }}.rule: Host(`{{ domain }}`)
        traefik.http.routers.{{ project_name }}.middlewares: redirect-to-https@file
        traefik.http.routers.{{ project_name }}-sec.middlewares: security_headers@file
      name: {{ project_name }}
    spec:
      containers:
      - image: ghcr.io/dani-garcia/vaultwarden:latest
        name: vaultwarden
        resources: {}
        envFrom:
          - configMapRef:
              name: vaultwarden_env_map
        env:
          - name: SMTP_PASSWORD
            valueFrom:
              secretKeyRef:
                key: smtp_password
                name: {{ project_name }}_secrets
          - name: ADMIN_TOKEN
            valueFrom:
              secretKeyRef:
                key: admin_token
                name: {{ project_name }}_secrets
        volumeMounts:
          - mountPath: /data
            name: vaultwarden_data
          - mountPath: "/data/vaultwarden.log"
            name: vaultwarden_logfile
      volumes:
      - name: vaultwarden_data
        persistentVolumeClaim:
          claimName: vaultwarden_data
      - name: vaultwarden_logfile
        hostPath: 
          path: "{{ project_dir }}/vaultwarden.log"
          type: FileOrCreate
